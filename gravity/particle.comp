#version 450 core

layout(local_size_x = 256) in;                                                  // Work group size

uniform float gravity_constant;
uniform uint num_particles;
uniform float dt;

layout(std430, binding=0) buffer particles_buffer {                             // particle data buffer
    vec4 particles[];
};

void main() {
    uint pid = gl_GlobalInvocationID.x;                                         // working particle
    uint pid2;                                                                  // rest of the particles

    if (pid >= num_particles) return;

    vec3 pos = particles[pid * 2    ].xyz;                                      //Current postion and vel.
    vec3 vel = particles[pid * 2 + 1].xyz;

    vec3 acc = vec3(0.0);

    for (pid2 = 0; pid2 < num_particles; pid2++) {                              // Looping through every particle
        if (pid2 == pid) continue;
        vec3  pos2  = particles[pid2 * 2].xyz;                                  //mass and postion for other particles
        float mass2 = particles[pid2 * 2].w;

        vec3 dpos = pos2 - pos;
        float dist_sq = dot(dpos, dpos);
        acc += (mass2 / sqrt(dist_sq * dist_sq * dist_sq)) * dpos;              //Acc. calculation
    }

//*****************************SYNCHRONIZATION**********************************
    barrier();
    memoryBarrier();

    acc *= gravity_constant;                                                    //Vel. and position update
    vel += acc * dt;
    pos += vel * dt;

    particles[pid * 2    ].xyz = pos;
    particles[pid * 2 + 1].xyz = vel;
}
